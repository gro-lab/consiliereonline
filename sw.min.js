const CACHE_VERSION="3.2",CACHE_NAME="consiliereonline-v3.2",OFFLINE_PAGE="/404.html",CORE_ASSETS=["/","/index.html","/styles.css","/script.js","/404.html","/manifest.json"],DYNAMIC_ASSETS=["/consiliere-online-razvan-mischie-event-1.jpg","/consiliere-online-razvan-mischie-event-2.jpg","/consiliere-online-razvan-mischie-event-3.jpg","/consiliere-online-razvan-mischie-event-4.jpg","/consiliere-online-razvan-mischie-event-5.jpg"],OPTIONAL_ASSETS=["/icons/icon-192x192.png","/icons/icon-512x512.png","/icons/apple-touch-icon.png","/icons/favicon-32x32.png","/icons/favicon-16x16.png","/favicon.ico"];async function updateContent(){const e=await caches.open(CACHE_NAME);await Promise.all(DYNAMIC_ASSETS.map(async n=>{try{const t=await fetch(n,{cache:"reload"});t.ok&&await e.put(n,t)}catch(e){console.warn(`[ServiceWorker] Background sync failed for ${n}:`,e)}}))}self.addEventListener("install",e=>{console.log("[ServiceWorker] Installing version:","3.2"),e.waitUntil(caches.open(CACHE_NAME).then(e=>(console.log("[ServiceWorker] Caching core assets"),e.addAll(CORE_ASSETS).then(()=>(console.log("[ServiceWorker] Caching dynamic assets"),Promise.all(DYNAMIC_ASSETS.map(n=>fetch(n,{cache:"reload"}).then(t=>{if(t.ok)return e.put(n,t);throw new Error(`Bad response for ${n}: ${t.status}`)}).catch(e=>{console.warn(`[ServiceWorker] Failed to cache ${n}:`,e)}))))).then(()=>(console.log("[ServiceWorker] Caching optional assets"),Promise.all(OPTIONAL_ASSETS.map(n=>fetch(n,{cache:"reload"}).then(t=>{if(t.ok)return e.put(n,t)}).catch(e=>{console.info(`[ServiceWorker] Optional asset not found: ${n}`)}))))))).catch(e=>{throw console.error("[ServiceWorker] Installation failed:",e),e}))}),self.addEventListener("message",e=>{e.data&&"SKIP_WAITING"===e.data.type&&(console.log("[ServiceWorker] Received skipWaiting message"),self.skipWaiting())}),self.addEventListener("fetch",e=>{const{request:n}=e,t=new URL(n.url);"GET"===n.method&&t.origin.startsWith(self.location.origin)&&(t.pathname.endsWith("/sw.js")?e.respondWith(fetch(n)):t.pathname.startsWith("/api/")?e.respondWith(fetch(n).then(e=>{const t=e.clone();return caches.open(CACHE_NAME).then(e=>e.put(n,t)),e}).catch(()=>caches.match(n))):CORE_ASSETS.includes(t.pathname)?e.respondWith(caches.match(n).then(e=>e||fetch(n))):DYNAMIC_ASSETS.includes(t.pathname)?e.respondWith(caches.match(n).then(e=>{const t=fetch(n).then(e=>{if(e.ok){const t=e.clone();caches.open(CACHE_NAME).then(e=>e.put(n,t))}return e}).catch(()=>e);return e||t})):e.respondWith(fetch(n).catch(()=>{if(n.headers.get("Accept")&&n.headers.get("Accept").includes("text/html"))return caches.match("/404.html")})))}),self.addEventListener("activate",e=>{console.log("[ServiceWorker] Activating version:","3.2"),e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CACHE_NAME)return console.log("[ServiceWorker] Removing old cache:",e),caches.delete(e)}))).then(()=>{if(self.registration.navigationPreload)return self.registration.navigationPreload.enable()}).then(()=>self.clients.claim()).then(()=>(console.log("[ServiceWorker] Activation complete, version:","3.2"),self.clients.matchAll().then(e=>{e.forEach(e=>{e.postMessage({type:"SERVICE_WORKER_ACTIVATED",version:"3.2"})})}))))}),self.addEventListener("sync",e=>{"update-content"===e.tag&&e.waitUntil(updateContent())});