const CACHE_VERSION="3.3",CACHE_NAME="consiliereonline-v3.3",OFFLINE_PAGE="/404.html",CORE_ASSETS=["/","/index.html","/styles.css","/script.js","/404.html","/manifest.json"],DYNAMIC_ASSETS=["/consiliere-online-razvan-mischie-event-1.jpg","/consiliere-online-razvan-mischie-event-2.jpg","/consiliere-online-razvan-mischie-event-3.jpg","/consiliere-online-razvan-mischie-event-4.jpg","/consiliere-online-razvan-mischie-event-5.jpg"],OPTIONAL_ASSETS=["/icons/icon-192x192.png","/icons/icon-512x512.png","/icons/apple-touch-icon.png","/icons/favicon-32x32.png","/icons/favicon-16x16.png","/favicon.ico"];async function handleNavigationRequest(e){const{request:n,preloadResponse:t}=e;try{const e=await t;if(e)return console.log("[ServiceWorker] Using preloaded response for:",n.url),e}catch(e){console.log("[ServiceWorker] Preload failed, falling back to cache/network:",e)}try{const e=await caches.match(n);if(e)return console.log("[ServiceWorker] Found navigation request in cache:",n.url),e}catch(e){console.warn("[ServiceWorker] Cache lookup failed:",e)}try{console.log("[ServiceWorker] Fetching navigation request from network:",n.url);const e=await fetch(n);if(200===e.status){(await caches.open(CACHE_NAME)).put(n,e.clone()).catch(e=>{console.warn("[ServiceWorker] Failed to cache navigation response:",e)})}return e}catch(e){console.error("[ServiceWorker] Network fetch failed for navigation:",e);const n=await caches.match("/404.html");if(n)return n;const t=await caches.match("/index.html");return t||new Response('\n      <!DOCTYPE html>\n      <html lang="ro">\n        <head>\n          <title>Offline - Consiliere Online</title>\n          <meta charset="UTF-8">\n          <meta name="viewport" content="width=device-width, initial-scale=1.0">\n          <style>\n            body { \n              font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Arial, sans-serif;\n              text-align: center; \n              padding: 2rem; \n              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n              color: white;\n              min-height: 100vh;\n              display: flex;\n              flex-direction: column;\n              justify-content: center;\n              align-items: center;\n              margin: 0;\n            }\n            h1 { margin-bottom: 1rem; }\n            p { opacity: 0.9; margin-bottom: 2rem; }\n            button {\n              background: white;\n              color: #667eea;\n              border: none;\n              padding: 1rem 2rem;\n              border-radius: 8px;\n              cursor: pointer;\n              font-size: 1rem;\n              font-weight: 600;\n            }\n            button:hover { background: #f0f0f0; }\n          </style>\n        </head>\n        <body>\n          <h1>Sunteți Offline</h1>\n          <p>Nu se poate încărca pagina. Verificați conexiunea la internet și încercați din nou.</p>\n          <button onclick="window.location.reload()">Reîncărcați Pagina</button>\n        </body>\n      </html>\n    ',{headers:{"Content-Type":"text/html; charset=utf-8"},status:200})}}async function updateContent(){const e=await caches.open(CACHE_NAME);await Promise.all(DYNAMIC_ASSETS.map(async n=>{try{const t=await fetch(n,{cache:"reload"});t.ok&&await e.put(n,t)}catch(e){console.warn(`[ServiceWorker] Background sync failed for ${n}:`,e)}}))}self.addEventListener("install",e=>{console.log("[ServiceWorker] Installing version:","3.3"),e.waitUntil(caches.open(CACHE_NAME).then(e=>(console.log("[ServiceWorker] Caching core assets"),e.addAll(CORE_ASSETS).then(()=>(console.log("[ServiceWorker] Caching dynamic assets"),Promise.all(DYNAMIC_ASSETS.map(n=>fetch(n,{cache:"reload"}).then(t=>{if(t.ok)return e.put(n,t);throw new Error(`Bad response for ${n}: ${t.status}`)}).catch(e=>{console.warn(`[ServiceWorker] Failed to cache ${n}:`,e)}))))).then(()=>(console.log("[ServiceWorker] Caching optional assets"),Promise.all(OPTIONAL_ASSETS.map(n=>fetch(n,{cache:"reload"}).then(t=>{if(t.ok)return e.put(n,t)}).catch(e=>{console.info(`[ServiceWorker] Optional asset not found: ${n}`)}))))))).catch(e=>{throw console.error("[ServiceWorker] Installation failed:",e),e}))}),self.addEventListener("message",e=>{e.data&&"SKIP_WAITING"===e.data.type&&(console.log("[ServiceWorker] Received skipWaiting message"),self.skipWaiting())}),self.addEventListener("fetch",e=>{const{request:n}=e,t=new URL(n.url);"GET"===n.method&&t.origin.startsWith(self.location.origin)&&(t.pathname.endsWith("/sw.js")?e.respondWith(fetch(n)):"navigate"!==n.mode?t.pathname.startsWith("/api/")?e.respondWith(fetch(n).then(e=>{const t=e.clone();return caches.open(CACHE_NAME).then(e=>e.put(n,t)),e}).catch(()=>caches.match(n))):CORE_ASSETS.includes(t.pathname)?e.respondWith(caches.match(n).then(e=>e||fetch(n))):DYNAMIC_ASSETS.includes(t.pathname)?e.respondWith(caches.match(n).then(e=>{const t=fetch(n).then(e=>{if(e.ok){const t=e.clone();caches.open(CACHE_NAME).then(e=>e.put(n,t))}return e}).catch(()=>e);return e||t})):e.respondWith(fetch(n).catch(()=>{if(n.headers.get("Accept")&&n.headers.get("Accept").includes("text/html"))return caches.match("/404.html")})):e.respondWith(handleNavigationRequest(e)))}),self.addEventListener("activate",e=>{console.log("[ServiceWorker] Activating version:","3.3"),e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CACHE_NAME)return console.log("[ServiceWorker] Removing old cache:",e),caches.delete(e)}))).then(()=>{if(self.registration.navigationPreload)return self.registration.navigationPreload.enable().then(()=>{console.log("[ServiceWorker] Navigation preload enabled")}).catch(e=>{console.warn("[ServiceWorker] Navigation preload not supported:",e)})}).then(()=>self.clients.claim()).then(()=>(console.log("[ServiceWorker] Activation complete, version:","3.3"),self.clients.matchAll().then(e=>{e.forEach(e=>{e.postMessage({type:"SERVICE_WORKER_ACTIVATED",version:"3.3"})})}))))}),self.addEventListener("sync",e=>{"update-content"===e.tag&&e.waitUntil(updateContent())});